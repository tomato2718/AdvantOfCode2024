__all__ = ["TestSolution"]

from src.day16._reindeer_maze import Solution, _Map
from tests.helper import Testable

TEST_CASE_1: _Map = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", ".", "E", "#"],
    ["#", ".", "#", ".", "#", "#", "#", ".", "#", ".", "#", "#", "#", ".", "#"],
    ["#", ".", ".", ".", ".", ".", "#", ".", "#", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", "#", "#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#", "#", "#", ".", "#"],
    ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#"],
    ["#", "#", "#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#"],
    ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", "#", "#", ".", "#", ".", "#", ".", "#"],
    ["#", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#", ".", "#", ".", "#"],
    ["#", ".", "#", "#", "#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#"],
    ["#", "S", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]

TEST_CASE_2: _Map = [
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", "E", "#"],
    ["#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", ".", ".", ".", "#", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", ".", "#", "#", "#", ".", "#", ".", "#", ".", "#"],
    ["#", ".", ".", ".", "#", ".", "#", ".", "#", ".", ".", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#"],
    ["#", ".", "#", ".", ".", ".", "#", ".", "#", ".", "#", ".", ".", ".", ".", ".", "#"],
    ["#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#", "#", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
    ["#", ".", "#", ".", "#", "#", "#", ".", "#", "#", "#", "#", "#", ".", "#", "#", "#"],
    ["#", ".", "#", ".", "#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", "#", "#", "#", "#", ".", "#", "#", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", "#"],
    ["#", ".", "#", ".", "#", ".", "#", "#", "#", "#", "#", "#", "#", "#", "#", ".", "#"],
    ["#", "S", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
]


class TestSolution(Testable):
    def test_find_minimum_costs_givenMap_returnMinimunCostFromStartToEnd(self) -> None:
        assert Solution.find_minimum_costs(TEST_CASE_1) == 7036
        assert Solution.find_minimum_costs(TEST_CASE_2) == 11048
