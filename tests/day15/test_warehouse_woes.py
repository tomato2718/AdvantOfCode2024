__all__ = ["TestSolution", "TestSokoban"]

from src.day15 import Solution
from src.day15._warehouse_woes import Sokoban, _Map, _Move
from tests.helper import Testable


class TestSolution(Testable):
    def test_execute_givenCommands_modifyTheMap(self) -> None:
        test_case: _Map = [
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", "O", ".", "O", ".", "#"],
            ["#", "#", "@", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", ".", "#", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"],
        ]
        solution = Solution(test_case)
        COMMANDS: list[_Move] = [
            "<",
            "^",
            "^",
            ">",
            ">",
            ">",
            "v",
            "v",
            "<",
            "v",
            ">",
            ">",
            "v",
            "<",
            "<",
        ]

        solution.execute(COMMANDS)

        assert solution.get_map() == [
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", "O", "O", "#"],
            ["#", "#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", "O", "#"],
            ["#", ".", "#", "O", "@", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"],
        ]

    def test_get_gps_coordinates_whenCalled_returnSumOfGPSCoordinates(self) -> None:
        test_case: _Map = [
            ["#", "#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", "O", ".", "O", ".", "#"],
            ["#", "#", "@", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", ".", "#", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", "O", ".", ".", "#"],
            ["#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#", "#"],
        ]
        solution = Solution(test_case)
        COMMANDS: list[_Move] = [
            "<",
            "^",
            "^",
            ">",
            ">",
            ">",
            "v",
            "v",
            "<",
            "v",
            ">",
            ">",
            "v",
            "<",
            "<",
        ]

        solution.execute(COMMANDS)
        assert solution.get_gps_coordinates() == 2028


class TestSokoban(Testable):
    def test_move_up(self) -> None:
        MAP: _Map = [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", "@", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]
        sokoban = Sokoban(MAP)

        sokoban.move_up()

        assert sokoban.map_ == [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "@", "#"],
            ["#", ".", ".", ".", "O", ".", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]

    def test_move_right(self) -> None:
        MAP: _Map = [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", "@", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]
        sokoban = Sokoban(MAP)

        sokoban.move_right()

        assert sokoban.map_ == [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", "@", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]

    def test_move_down(self) -> None:
        MAP: _Map = [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", "@", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]
        sokoban = Sokoban(MAP)

        sokoban.move_down()

        assert sokoban.map_ == [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", ".", "#"],
            ["#", ".", ".", ".", ".", "@", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]

    def test_move_left(self) -> None:
        MAP: _Map = [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", "O", "@", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]
        sokoban = Sokoban(MAP)

        sokoban.move_left()

        assert sokoban.map_ == [
            ["#", "#", "#", "#", "#", "#", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", ".", ".", "O", "#"],
            ["#", ".", ".", "O", "@", ".", "#"],
            ["#", ".", ".", ".", ".", ".", "#"],
            ["#", "#", "#", "#", "#", "#", "#"],
        ]
